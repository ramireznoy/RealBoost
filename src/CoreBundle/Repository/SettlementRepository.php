<?php

namespace CoreBundle\Repository;

/**
 * SettlementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SettlementRepository extends \Doctrine\ORM\EntityRepository {

    public function findPendingThisWeek($advisor) {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT
                WEEKDAY(core_settlements.reunionDate) AS day,
                core_settlements.groupId AS id,
                core_settlements.reunionDate AS date,
                DATE_FORMAT(core_settlements.reunionTime, "%H:%i") AS time,
                core_settlements.groupName AS name,
                core_settlements.groupHome AS address,
                core_settlements.groupFee AS fee,
                sum(core_settlements.clientFee) + sum(core_settlements.clientDebt) - sum(core_settlements.settledFor) AS tocollect,
                core_settlements.clientCount AS clients,
                COUNT(core_settlements.groupId) AS unpaids
                FROM core_settlements
                WHERE core_settlements.reunionDate between
                CURDATE() - INTERVAL WEEKDAY(CURDATE()) - 0 + IF(WEEKDAY(CURDATE()) >= 0, 0, 7 ) DAY
                AND
                CURDATE() + INTERVAL 5 - WEEKDAY(CURDATE()) DAY
                AND core_settlements.settled = 0
                AND core_settlements.advisor = :advisor
                GROUP BY core_settlements.groupId
                ORDER BY day,core_settlements.reunionDate, core_settlements.reunionTime';
        $stmt = $conn->prepare($sql);
        $stmt->execute(array('advisor' => $advisor));
        return $stmt->fetchAll();
    }

    public function findPendingClientsOnWeek($group) {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT
                core_settlements.groupHome AS address,
                DATE_FORMAT(core_settlements.reunionTime, "%H:%i") AS time,
                core_settlements.id AS id,
                core_settlements.clientName AS name,
                core_settlements.clientLoan AS loan,
                IF(core_settlements.settledFor <= core_settlements.clientDebt, core_settlements.clientFee, (core_settlements.clientFee + core_settlements.clientDebt) - core_settlements.settledFor) AS fee,
                IF(core_settlements.settledFor >= core_settlements.clientDebt, 0, core_settlements.clientDebt - core_settlements.settledFor) AS debt,
                core_settlements.clientHome AS clientaddress,
                core_settlements.clientPhone AS phone,
                core_settlements.clientPosition AS position
                FROM core_settlements
                WHERE core_settlements.reunionDate BETWEEN
                CURDATE() - INTERVAL WEEKDAY(CURDATE()) - 0 + IF(WEEKDAY(CURDATE()) >= 0, 0, 7 ) DAY
                AND
                CURDATE() + INTERVAL 5 - WEEKDAY(CURDATE()) DAY
                AND core_settlements.settled = 0
                AND core_settlements.groupId = :group
                ORDER BY name';
        $stmt = $conn->prepare($sql);
        $stmt->execute(array('group' => $group));
        return $stmt->fetchAll();
    }

    public function findGroups() {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT
                core_settlements.groupId AS id,
                core_settlements.groupName AS name,
                core_settlements.advisor AS advisor,
                core_settlements.groupFee AS fee,
                core_settlements.groupHome AS address,
                core_settlements.groupLoan AS loan,
                core_settlements.reunionDate AS date,
                (SELECT CASE WEEKDAY(core_settlements.reunionDate)
                WHEN "0" THEN "Lunes"
                WHEN "1" THEN "Martes"
                WHEN "2" THEN "Miércoles"
                WHEN "3" THEN "Jueves"
                WHEN "4" THEN "Viernes"
                WHEN "5" THEN "Sábado"
                WHEN "6" THEN "Domingo" END) AS day,
                DATE_FORMAT(core_settlements.reunionTime, "%H:%i") AS time,
                count(core_settlements.clientId) AS clientcount
                FROM core_settlements
                GROUP BY core_settlements.groupId
                ORDER BY core_settlements.groupName';
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}
